@using System.Security.Claims
@inject IProjectService ProjectService
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<CascadingAuthenticationState>
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" >
            <NotAuthorized>
                <h3>
                    you aren't authorized!
                </h3>
                <a class="btn btn-primary" href="login">Login</a> or <a class="btn btn-secondary" href="register">Register</a>
            </NotAuthorized>

            </AuthorizeRouteView>
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
</CascadingAuthenticationState>
@code {
    protected override void OnInitialized()
    {
        AuthStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
    }

    public async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        var state = await task;
        if(state != null && state.User.Identity!.IsAuthenticated)
        {
            var roles = state.User.Claims.Where(c => c.Type == ClaimTypes.Role)
                        .Select(c => c.Value).ToList();
            if(roles.Contains("Admin"))
            {
                await ProjectService.LoadAllProjects();
            }
        }
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
    }
}
