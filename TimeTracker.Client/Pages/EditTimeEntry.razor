@page "/timeentry"
@page "/timeentry/{id:int}"
@inject ITimeEntryService TimeEntryService
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable
@attribute [Authorize]

@if (Id is null)
{
    <h3>Create Time Entry</h3>
}
else
{
    <h3>EditTimeEntry</h3>
}





<EditForm Model="timeEntry" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div>
        <label for="startDate">Start</label>
        <InputDate id="startDate" @bind-Value="timeEntry.Start" Type="InputDateType.Date" class=""></InputDate>
    </div>
    <div>
        <label for="endDate">End</label>
        <InputDate id="endDate" @bind-Value="timeEntry.End" Type="InputDateType.Date" class=""></InputDate>
    </div>
    <div>
        <label for="project">Project</label>
        <InputSelect id="project" @bind-Value="timeEntry.ProjectId" class="form-control">
                @foreach(var project in ProjectService.Projects)
            {
                <option value="@project.Id">@project.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="() => timeEntry.ProjectId" />
    </div>
    @if(Id is not null)
    {
        <button type="button" @onclick="DeleteTimeEntry">Delete</button>
    }
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    TimeEntryRequest timeEntry = new TimeEntryRequest();

    protected override void OnInitialized()
    {
        ProjectService.OnChange += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var result = await TimeEntryService.GetTimeEntryById((int)Id);
            timeEntry = new TimeEntryRequest
                {
                    End = result.End,
                    Start = result.Start,
                    ProjectId = result.Project.Id
                };
        }
    }

    async Task HandleSubmit()
    {
        if(Id is null)
        {
            await TimeEntryService.CreateTimeEntry(timeEntry);
            NavigationManager.NavigateTo("/timeentries");
        } else
        {
            await TimeEntryService.UpdateTimeEntry((int)Id, timeEntry);
            NavigationManager.NavigateTo("/timeentries");
        }
    }

    async Task DeleteTimeEntry()
    {
        var confirmed = await JSRuntime
            .InvokeAsync<bool>("confirm", "Do you want to delete this?");


        @if(Id is not null)
        {
            await TimeEntryService.DeleteTimeEntry((int)Id);
            NavigationManager.NavigateTo("/timeentries");
        }

    }

    public void Dispose()
    {
        ProjectService.OnChange -= StateHasChanged;
    }
    
}
